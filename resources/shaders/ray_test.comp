#version 450

// #include "voxel.glsl"

layout(local_size_x=16, local_size_y=16) in;
// layout (set = 1, binding = 0, rgba8) uniform readonly image2D inputImage;
layout(set=0, binding=0, rgba8) uniform writeonly image2D resultImage;

layout(set=0, binding=1) uniform Camera {
	vec4 position; // Never ever ever use a vec3, it is a cursed type
	mat4 rotation_matrix;
	float near;
} camera;


// https://www.shadertoy.com/view/wtSyRd
// vec3(is_hit, t_max, t_min)
vec3 aabb_intersect(vec3 origin, vec3 direction, vec3 bmin, vec3 bmax) {
	vec3 inverse_direction = 1.0 / direction;
	vec3 tbot = inverse_direction * (bmin - origin);
	vec3 ttop = inverse_direction * (bmax - origin);
	vec3 tmin = min(ttop, tbot);
	vec3 tmax = max(ttop, tbot);
	vec2 traverse = max(tmin.xx, tmin.yz);
	float traverselow = max(traverse.x, traverse.y);
	traverse = min(tmax.xx, tmax.yz);
	float traversehi = min(traverse.x, traverse.y);
	return vec3(float(traversehi > max(traverselow, 0.0)), traversehi, traverselow);
}


bool getVoxel(ivec3 pos) {
	return pos.x > 1 && pos.x < 6 && 
		pos.y > -4 && pos.y < 4 &&
		pos.z > -8 && pos.z < -4;
}


// // https://www.shadertoy.com/view/4dX3zl
// const int MAX_STEPS = 64;
// void dda(vec3 origin, vec3 direction) {
// 	// Current voxel
// 	ivec3 vpos = ivec3(floor(origin + 0.));
// 	// Length along ray from axis intersection to next axis intersection
// 	vec3 ddist = abs(vec3(1.0 / direction));
// 	// The direction to step along an axis
// 	ivec3 vstep = ivec3(sign(direction));
// 	// Length along ray from position to next axis intersection
// 	vec3 sidedist = (sign(direction) * (vec3(vpos) - origin) + (sign(direction) * 0.5) + 0.5) * ddist;
// 	// Which face was hit
// 	bvec3 mask;
// 	for(int i = 0; i < MAX_STEPS; i++) {
// 		if (getVoxel(vpos)) break;
// 		if (true) {
// 			mask = lessThanEqual(sidedist.xyz, min(sidedist.yzx, sidedist.zxy));
// 			sidedist = vec3(mask) * ddist;
// 			vpos += ivec3(vec3(mask)) * vstep;
// 		}
// 		else {
// 			if (sidedist.x < sidedist.y) {
// 				if (sidedist.x < sidedist.z) {
// 					sidedist.x += ddist.x;
// 					vpos.x += vstep.x;
// 					mask = bvec3(true, false, false);
// 				}
// 				else {
// 					sidedist.z += ddist.z;
// 					vpos.z += vstep.z;
// 					mask = bvec3(false, false, true);
// 				}
// 			}
// 			else {
// 				if (sidedist.y < sidedist.z) {
// 					sidedist.y += ddist.y;
// 					vpos.y += vstep.y;
// 					mask = bvec3(false, true, false);
// 				}
// 				else {
// 					sidedist.z += ddist.z;
// 					vpos.z += vstep.z;
// 					mask = bvec3(false, false, true);
// 				}
// 			}
// 		}
		
// 	}

// 	float d = length(vec3(mask) * (sidedist - ddist));
// }


vec3 aw_ray(vec3 origin, vec3 direction, float tlimit) {
	ivec3 vpos = ivec3(floor(origin));
	ivec3 vstep = ivec3(sign(direction));
	vec3 tdelta = abs(vec3(1.0 / direction));
	
	float a = vstep.x > 0 ? origin.x - floor(origin.x) : 1.0 - origin.x + floor(origin.x);
	float b = vstep.y > 0 ? origin.y - floor(origin.y) : 1.0 - origin.y + floor(origin.y);
	float c = vstep.z > 0 ? origin.z - floor(origin.z) : 1.0 - origin.z + floor(origin.z);
	vec3 tmax = (vec3(1.0) - vec3(a, b, c)) * tdelta;

	vec3 normal;
	float t = 0.0;
	while (t < tlimit) {
		if (getVoxel(vpos)) break;

		if (tmax.x < tmax.y) {
			if (tmax.x < tmax.z) {
				normal = vec3(-vstep.x, 0.0, 0.0);
				vpos.x += vstep.x;
				t = tmax.x;
				tmax.x += tdelta.x;
			}
			else {
				normal = vec3(0.0, 0.0, -vstep.z);
				vpos.z += vstep.z;
				t = tmax.z;
				tmax.z += tdelta.z;
			}
		}
		else {
			if (tmax.y < tmax.z) {
				normal = vec3(0.0, -vstep.y, 0.0);
				vpos.y += vstep.y;
				t = tmax.y;
				tmax.z += tdelta.y;
			}
			else {
				normal = vec3(0.0, 0.0, -vstep.z);
				vpos.z += vstep.z;
				t = tmax.z;
				tmax.z += tdelta.z;
			}
		}
	}

	// return mix(vec3(1.0), vec3(0.5), abs(normal));
	return vec3(1.0);
}

 
void main() {

	ivec2 dim = imageSize(resultImage);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;

	vec3 origin = camera.position.xyz;

	vec2 uv_11space = (uv * 2.0 - vec2(1.0)) * vec2(1.0, -1.0);
	vec3 base_direction = normalize(vec3(uv_11space, camera.near));
	vec3 direction = normalize((camera.rotation_matrix * vec4(base_direction, 1.0)).xyz);

	// vec4 result = vec4(0.0);
	// if (direction.x > 0.0) {
	// 	result.x += 1.0;
	// }
	// if (direction.y > 0.0) {
	// 	result.y += 1.0;
	// }

	vec3 boxllc = vec3(3.0);
	vec3 boxurc = vec3(0.5);
	vec3 boxctr = (boxllc + boxurc) / 2.0;

	vec3 box = aabb_intersect(origin, direction, boxllc, boxurc);
	float is_box_hit = box.x;
	float box_t_max = box.y;
	float box_t_min = box.z;
	vec3 box_hit = boxctr - (origin + (box_t_min * direction));
	
	vec3 box_intersect_normal = box_hit / max(max(abs(box_hit.x), abs(box_hit.y)), abs(box_hit.z));
	box_intersect_normal = clamp(box_intersect_normal, vec3(0.0,0.0,0.0), vec3(1.0,1.0,1.0));
	box_intersect_normal = normalize(floor(box_intersect_normal * 1.0000001));
	
	vec4 result = vec4(mix(vec3(0.0), vec3(1.0), is_box_hit), 1.0);

	// vec4 result = vec4((uv_11space + vec2(1.0)) / 2.0, 1.0, 0.0);

	
	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), result);
}
