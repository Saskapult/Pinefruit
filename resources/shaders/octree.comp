#version 450

#include "voxel.glsl"

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform writeonly image2D resultImage;
layout (binding = 1, r32ui) uniform readonly uimage3D depthImage;

// layout(set=0, binding=0)
// uniform Camera {
// 	vec4 pos;
// 	mat4 view_proj;
// 	mat4 proj;
// 	mat4 inv_proj;
// };

// layout (set=0, binding=1) uniform VoxelData SVO;



// layout(push_constant) uniform PushConstants {
//     vec3 rayOrigin;
//     float viewGridTopLeftCornerX;
 
//     vec3 viewGridRight;
//     float viewGridTopLeftCornerY;
 
//     vec3 viewGridDown;
//     float viewGridTopLeftCornerZ;
 
//     float viewGridDensity;
// } push;


// vec4 ray_thing(vec3 position, vec3 direction) {

// 	return vec4(0.0);
// }

 
void main() {
	ivec2 dim = imageSize(resultImage);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;

	// vec3 rayO = ubo.camera.pos;
	// vec3 rayD = normalize(vec3((-1.0 + 2.0 * uv) * vec2(ubo.aspectRatio, 1.0), -1.0));
		
	// Basic color path
	// int id = 0;
	// vec3 finalColor = renderScene(rayO, rayD, id);

	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(uv, 0.0, 0.0));
}
